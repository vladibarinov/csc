public class DateBackwardCounter { 
    
        final static long DAYSINYEAR = 365;
        final long DAYSINLEAPYEAR = 366;
        final static long EPOCHYEAR = 1581;
    
    
    
        static boolean isLeapYear (long year){ 
        boolean answer = false; 
        
        if (year %4 == 0 && (year %400 == 0 || year % 100 != 0)) 
            answer = true; 
        else 
            answer = false; 
        
        return answer; 
        } 

        static int returnDaysInMonth (long month, long year) { 

        int numberOfDays; 
        numberOfDays = 0; 
        
        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) 
            return 31; 

        else if (month == 4 || month == 6 || month == 9 || month == 11) 
            return 30; 
        
        else if (isLeapYear(year) && month == 2) return 29; 
        else if ( !isLeapYear(year) && month == 2) return 28; 
        
        return numberOfDays; 
    }    
    
        static String returnMonthName (long month) {
           String monthName;
           monthName = "";

           if (month == 1) monthName = "January" ;
           else if (month == 2) monthName = "February";
           else if (month == 3) monthName = "March";
           else if (month == 4) monthName = "April";
           else if (month == 5) monthName = "May";
           else if (month == 6) monthName = "June";
           else if (month == 7) monthName = "July";
           else if (month == 8) monthName = "August";
           else if (month == 9) monthName = "September";
           else if (month == 10) monthName = "October";
           else if (month == 11) monthName = "November";
           else if (month == 12) monthName = "December";

           return monthName;
    }
        
        static long returnDaysInYear (long year) {
        if (isLeapYear(year)) return 366;
        else return 365;
    }
    
        static long returnYearsFromEpoch (long dayscount) {
         
            long epochYear = Numbers.EPOCHYEAR;         
         
            while (dayscount > returnDaysInYear(epochYear)) {
                   dayscount -= returnDaysInYear(epochYear);
             
            epochYear += 1;
            }
            
            return epochYear;
    }

        static String returnMonthReminder (long dayscount) {
    
            long monthCounter = 1;
            long yearCounter = Numbers.EPOCHYEAR;
            
            while (dayscount > returnDaysInMonth(monthCounter, yearCounter)) {
                
                dayscount -= returnDaysInMonth(monthCounter, yearCounter);
                monthCounter += 1;
                
                
                if (monthCounter > 12) {
                    monthCounter = 1;
                    yearCounter += 1;
                }
                
            }
            
            return returnMonthName(monthCounter);
    }
    
        static long returnDaysReminder (long dayscount) {
    
            long monthCounter = 1;
            long yearCounter = Numbers.EPOCHYEAR;            
            
            while (dayscount > returnDaysInMonth(monthCounter, yearCounter)) {
                
                dayscount -= returnDaysInMonth(monthCounter, yearCounter);
                monthCounter += 1;
                
                
                if (monthCounter > 12) {
                    monthCounter = 1;
                    yearCounter += 1;
                }
                
            }
            
            return dayscount;
    }
    
     
    public static void main(String[] args) { 
            
         
        long numberOfDays;
        
        numberOfDays = 157914; // 791
     
        System.out.println("It is " + returnMonthReminder(numberOfDays) + " " + returnDaysReminder(numberOfDays)+ ", " + returnYearsFromEpoch(numberOfDays)); 
     
    } 
                           
} // End of class Numbers
